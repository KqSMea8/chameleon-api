<script cml-type="interface">
type responseType = {
  status: Number,
  data: String,
  headers: String
}

type requestParams = {
  url: String, 
  body: String, 
  headers: String,
  method: String,
  cb(res: responseType): void
}


interface UtilsInterface {
  request(params: requestParams): void;
}

</script>

<script cml-type="web">
import {parseHeader} from './common.js';
class Method implements UtilsInterface {
  
  request(params) {
    let {
      url,body,headers,method,cb
    } = params;
    

    let fetchOptions = {
      credentials: 'include',
      method,
      headers: JSON.parse(headers)
    }
    if(method.toUpperCase() == 'POST') {
      fetchOptions.body = body;
    }
    fetch(url, fetchOptions).then(res=>{
      res.text().then(data=>{
        cb({
          status: res.status,
          data,
          headers: parseHeader(res.headers && res.headers.map || {})
        })
      })
      
    }).catch(e=>{
      throw e;
    })
  }
}



export default new Method();
</script>

<script cml-type="weex">
import {parseHeader} from './common.js';

const stream = weex.requireModule('stream')

class Method implements UtilsInterface {
  
  request(params) {
    let {
      url,body,headers,method,cb
    } = params;

    stream.fetch({
      url,
      method,
      headers:JSON.parse(headers),
      body,
      type: 'text'
    }, function (res){
      cb({
        status: res.status,
        data: res.data,
      
        headers: parseHeader(res.headers)
      })
    })
  }
}

export default new Method();
</script>

<script cml-type="wx">

import {parseHeader} from './common.js';

class Method implements UtilsInterface {
  request(params) {
    let {
      url,body,headers,method,cb
    } = params;
    wx.request({
      url,
      data:body,
      dataType: 'text',
      method,
      header: JSON.parse(headers),
      success: function(res) {
         cb({
          status: res.statusCode,
          data: res.data, 
          headers: parseHeader(res.header)
        })
      },
      fail: function(e) {
        throw e;
      }
    })
  }
}

export default new Method();
</script>
