<template>
  <view class="page-container">
    <scroller
      class="scroller-box"
      height="{{1200}}"
    >
      <c-folding-panel title='获取参数'>
        <button
          text="获取启动参数"
          class="api-btn"
          c-bind:onclick="getLaunchOptionsSync"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='CanIUse'>
        <button
          text="CanIUse:showToast(true)"
          class="api-btn"
          c-bind:onclick="canIUse"
        ></button>
        <button
          text="CanIUse:open(true)"
          class="api-btn"
          c-bind:onclick="canIUseOpen"
        ></button>
        <button
          text="CanIUse:showAnyToast(false)"
          class="api-btn"
          c-bind:onclick="canIUseFalse"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='设置title(web/wx)'>
        <button
          text="点击设置网页title"
          class="api-btn"
          c-bind:onclick="setTitle"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='弹出框'>
        <button
          text="点击showToast"
          class="api-btn"
          c-bind:onclick="showToast"
        ></button>
        <button
          text="点击alert"
          class="api-btn"
          ref="wxalert"
          c-bind:onclick="showAlert"
        ></button>
        <button
          text="点击confirm"
          class="api-btn"
          c-bind:onclick="showConfirm"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='打开/关闭页面'>
        <button
          text="打开新页面"
          class="api-btn"
          c-bind:onclick="openPage"
        ></button>
        <button
          text="打开新页面并关闭当前"
          class="api-btn"
          c-bind:onclick="openPageClose"
        ></button>
        <button
          text="关闭页面"
          class="api-btn"
          c-bind:onclick="close"
        ></button>
        <button
          text="刷新页面"
          class="api-btn"
          c-bind:onclick="reload"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='选择图片'>
        <button
          text="选择图片:2选一"
          class="api-btn"
          c-bind:onclick="chooseImageBoth"
        ></button>
        <button
          text="选择图片:拍照"
          class="api-btn"
          c-bind:onclick="chooseImageByCamera"
        ></button>
        <button
          text="选择图片:相册"
          class="api-btn"
          c-bind:onclick="chooseImageByAlbum"
        ></button>
        <image
          style="width: 750cpx; height: 400cpx;"
          src="{{imageDataUrl}}"
        ></image>
        <text>图片base64长度：{{imageDataUrl.length}}</text>
      </c-folding-panel>
      <c-folding-panel title='设备信息'>
        <button
          text="点击获取设备信息"
          class="api-btn"
          c-bind:onclick="getSystemInfo"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='px与cpx转化'>
        <button
          text="px2cpx"
          class="api-btn"
          c-bind:onclick="px2cpx"
        ></button>
        <button
          text="cpx2px"
          class="api-btn"
          c-bind:onclick="cpx2px"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='网络请求'>
        <button
          text="调用GET请求"
          class="api-btn"
          c-bind:onclick="get"
        ></button>
        <button
          text="调用jsonp请求(web)"
          class="api-btn"
          c-bind:onclick="jsonp"
        ></button>
        <button
          text="调用POST请求"
          class="api-btn"
          c-bind:onclick="post"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='数据存储'>
        <button
          text="点击调用setStorage"
          class="api-btn"
          c-bind:onclick="setStorage"
        ></button>
        <button
          text="点击调用getStorage"
          class="api-btn"
          c-bind:onclick="getStorage"
        ></button>
        <button
          text="点击调用removeStorage"
          class="api-btn"
          c-bind:onclick="removeStorage"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='路由导航'>
        <button
          text="点击调用navigateTo"
          class="api-btn"
          c-bind:onclick="navigateTo"
        ></button>
        <button
          text="点击调用redirectTo"
          class="api-btn"
          c-bind:onclick="redirectTo"
        ></button>
        <button
          text="点击调用navigateBack"
          class="api-btn"
          c-bind:onclick="navigateBack"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='获取定位'>
        <button
          text="点击调用getLocationInfo"
          class="api-btn"
          c-bind:onclick="getLocationInfo"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='requestAnimationFrame'>
        <button
          text="点击调用requestAnimationFrame"
          class="api-btn"
          c-bind:onclick="requestAnimationFrame"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='getRect'>
        <button
          text="点击getRect获取元素属性"
          class="api-btn"
          c-bind:onclick="getRect"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='websocket'>
        <button
          text="建立连接并收发信息"
          class="api-btn"
          c-bind:onclick="handleConnect"
        ></button>
        <button
          text="关闭连接"
          class="api-btn"
          c-bind:onclick="closeConnect"
        ></button>
      </c-folding-panel>
      <c-folding-panel title='剪切板'>
        <text
          class='copy'
          ref="refTest"
        >{{copy}}</text>
        <button
          text="复制上面的那句话"
          class="api-btn"
          c-bind:onclick="setClipBoardData"
        ></button>

        <button
          text="获取剪贴板上最新的一条"
          class="api-btn"
          c-bind:onclick="getClipBoardData"
        ></button>
      </c-folding-panel>
    </scroller>
  </view>
</template>
<script>
import cml from '../../../api/index.js';
import routerConfig from '../../../router.config.json'

const routeMap = {};

routerConfig.routes.forEach(route => {
  routeMap[route['name']] = route
})

let ws;

class ManualTest {
  props = {
  }
  data = {
    imageDataUrl: '',
    requestGetUrl: '/api/getMessage',
    requestGetJsonpUrl: '/api/getMessageJsonp',
    requestPostUrl: '/api/getMessage',
    storageKey: 'storage_key',
    storageValue: {
      userinfo: {
        name: 'vava',
        age: 23
      }
    },
    navOpt: {
      url: '/pages/navigateBack/index',
      path: '/pages/navigateBack/index',
      query: {
        a: 1,
        b: 'test'
      },
    },
    copy: 'this is the data for copy',
  }

  computed = {

  }

  watch = {
  }

  methods = {

    px2cpx() {
      cml.px2cpx(1).then(cpx => {
        cml.showToast({
          message: cpx.toString()
        })
      })
    },

    cpx2px() {
      cml.cpx2px(750).then(px => {
        cml.showToast({
          message: px.toString()
        })
      })
    },

    getClipBoardData() {
      cml.getClipBoardData().then(res => {
        cml.showToast({
          message: JSON.stringify(res),
          duration: 2000
        })
      })
    },

    getRect() {
      cml.getRect(this.$refs.refTest, this).then(res => {
        cml.showToast({
          message: JSON.stringify(res)
        })
      })
    },

    setClipBoardData() {
      cml.setClipBoardData(this.copy).then(res => {
        cml.showToast({
          message: '复制成功',
          duration: 2000
        })
      }).catch(reason => {
        cml.showToast({
          message: JSON.stringify(reason),
          duration: 2000
        })
      })
    },

    canIUse() {
      cml.canIUse('showToast').then(res => {
        cml.showToast({
          message: 'showToast方法支持',
          duration: 2000
        })
      }, res => {
        cml.showToast({
          message: 'showToast方法不支持',
          duration: 2000
        })
      })
    },

    canIUseOpen() {
      cml.canIUse('open').then(res => {
        cml.showToast({
          message: 'open方法支持',
          duration: 2000
        })
      }, res => {
        cml.showToast({
          message: 'open方法不支持',
          duration: 2000
        })
      })
    },
    
    canIUseFalse() {
      cml.canIUse('showAnyToast').then(res => {
        cml.showToast({
          message: 'showAnyToast方法支持',
          duration: 2000
        })
      }, res => {
        cml.showToast({
          message: 'showAnyToast方法不支持',
          duration: 2000
        })
      })
    },

    getSystemInfo() {
      cml.getSystemInfo().then(res => {
        console.log(res)
        cml.showToast({
          message: JSON.stringify(res),
          duration: 2000
        })
      })
    },

    getLaunchOptionsSync() {
      const options = cml.getLaunchOptionsSync();
      cml.showToast({
        message: JSON.stringify(options),
      })
    },

    setTitle() {
      cml.setTitle('自定义title')
    },

    showToast() {
      cml.showToast({
        message: 'showToast test',
        duration: 2000
      });
    },

    showAlert() {
      cml.alert({
        message: '你好，我是alert！',
        confirmTitle: '我知道了'
      }).then(() => {
        cml.showToast({
          message: 'show toast after alert',
          duration: 500
        })
      })
    },

    showConfirm() {
      cml.confirm({
        message: 'confirm test1',
      }).then(value => {
        cml.showToast({
          message: 'show toast after confirm, you choose ' + value + ' just now',
        })
      })
    },

    openPage() {
      cml.open('https://www.didiglobal.com?cml_addr=' + encodeURIComponent('http://172.22.138.75:8000/weex/open-chameleon-api.js'), {
        wd: 'didichuxing',
        time: new Date()
      }, {
          closeCurrent: false
        })
    },

    openPageClose() {
      cml.open('https://www.didiglobal.com', {
        wd: 'didichuxing',
        time: new Date()
      }, {
          closeCurrent: true
        })
    },

    close() {
      cml.close()
    },

    reload() {
      cml.reload();
    },

    chooseImageBoth() {
      cml.chooseImage({ type: 'choice' }).then((res) => {
        if (res.base64 || res.WxTempFilePaths[0]) {
          this.imageDataUrl = res.base64 || res.WxTempFilePaths[0];
        } else {
          cml.showToast({
            message: '获取失败'
          })
        }
      })
    },

    chooseImageByCamera() {
      cml.chooseImage({ type: 'camera' }).then((res) => {
        if (res.base64 || res.WxTempFilePaths[0]) {
          this.imageDataUrl = res.base64 || res.WxTempFilePaths[0];
        } else {
          cml.showToast({
            message: '获取失败'
          })
        }
      })
    },

    chooseImageByAlbum() {
      cml.chooseImage({ type: 'album' }).then((res) => {
        if (res.base64 || res.WxTempFilePaths[0]) {
          this.imageDataUrl = res.base64 || res.WxTempFilePaths[0];
        } else {
          cml.showToast({
            message: '获取失败'
          })
        }
      })
    },

    get() {
      cml.get({
        url: this.requestGetUrl
      }).then(res => {
        cml.showToast({
          message: JSON.stringify(res),
          duration: 3000
        })
      }, err => {
        cml.showToast({
          message: JSON.stringify(err),
          duration: 3000
        })
      })
    },

    jsonp() {
      cml.get({
        url: this.requestGetJsonpUrl,
        setting: { jsonp: true }
      }).then(res => {
        cml.showToast({
          message: JSON.stringify(res),
          duration: 3000
        })
      }, err => {
        cml.showToast({
          message: JSON.stringify(err),
          duration: 3000
        })
      })
    },

    post() {
      cml.post({
        url: this.requestPostUrl,
        data: { name: 'chameleon' },
      }).then(res => {
        cml.showToast({
          message: JSON.stringify(res),
          duration: 3000
        })
      }, err => {
        cml.showToast({
          message: JSON.stringify(err),
          duration: 3000
        })
      })
    },

    setStorage() {
      cml.setStorage(this.storageKey, this.storageValue).then(res => {
        cml.showToast({
          message: '设置成功'
        })
      }, err => {
        console.log(err)
        cml.showToast({
          message: JSON.stringify(err)
        })
      })
    },

    getStorage() {
      cml.getStorage(this.storageKey).then(res => {
        console.log(res)
        cml.showToast({
          message: JSON.stringify(res)
        })
      }, err => {
        console.log(err)
        cml.showToast({
          message: JSON.stringify(err)
        })
      })
    },

    removeStorage() {
      cml.removeStorage(this.storageKey).then(res => {
        cml.showToast({
          message: '清除成功'
        })
      }, err => {
        console.log(err)
        cml.showToast({
          message: JSON.stringify(err)
        })
      })
    },

    navigateTo() {
      cml.navigateTo(this.navOpt)
    },
    redirectTo() {
      cml.redirectTo(this.navOpt)
    },

    navigateBack() {
      cml.navigateBack()
    },
    // config参数只在wx端使用，可以不填写；若填写，则必须包含wxAppId,wxOpenId

    getLocationInfo() {
      cml.getLocationInfo().then(res => {
        console.log(res)
        cml.showToast({
          message: JSON.stringify(res)
        })
      })
    },

    requestAnimationFrame() {
      cml.requestAnimationFrame(() => {
        console.log('success')
        cml.showToast({
          message: JSON.stringify('success')
        })
      })
    },

    //socket相关
    handleConnect() {
      ws = cml.initSocket('ws://echo.websocket.org');
      ws.onopen(() => {
        cml.showToast({
          message: 'socket connected...',
          duration: 1000
        });
        setTimeout(() => {
          ws.send('hello cml socket');
        }, 2000);
      });
      ws.onmessage(res => {
        cml.showToast({
          message: 'receive from server: ' + res.data,
          duration: 1000
        })
      });
      ws.onerror(err => {
        console.error(err)
      });
      ws.onclose(() => {
        cml.showToast({
          message: 'socket closed...'
        })
      });
    },

    closeConnect() {
      ws.close()
    }
  }
  mounted() {

  }
  beforeCreate() {
  }

  created() {
  }

  beforeMount() {
  }

  beforeDestroy() {
  }

  destroyed() {
  }
}

export default new ManualTest();
</script>
<style scoped>
.page-container {
  font-size: 32cpx;
  color: #000;
  padding: 10cpx 25cpx;
  background: #fafafa;
}
.api-btn {
  margin: auto;
  margin-top: 20cpx;
  margin-bottom: 20cpx;
}
</style>
<script cml-type="json">
{
    "base": {
        "usingComponents": {
          "c-folding-panel": "/components/c-folding-panel/c-folding-panel"
        }
    },
    "wx": {
        "navigationBarTitleText": "index",
        "backgroundTextStyle": "dark",
        "backgroundColor": "#E2E2E2",
        "component": true
       
    }
}
</script>


